#chapter2 : 퍼셉트론

2.1 퍼셉트론이란?
: 퍼셉트론은 다수의 신호를 입력으로 받아 하나의 신호를 출력합니다.
: 뉴런, 노드 / 가중치 / 임계값
: 가중치가 클수록 해당 신호가 그만큼 더 중요함을 의미

2.2 단순한 논리 회로
2.2.1 AND 게이트
2.2.2 NAND 게이트와 OR 게이트
: NAND ~ AND 게이트의 출력을 뒤집은 것
: 마치 파색조 배우가 다양한 인물은 연기하는 것처럼 똑같은 구조의 퍼셉트론이 매개변수의 값만 적절히 조정하여 AND, NAND, OR로 변신하는 것!

2.3 퍼셉트론 구현하기
2.3.1 간단한 구현부터

def AND(x1, x2):
   w1, w2, theta = 0.5, 0.5, 0.7
   tmp = x1 * w1 + x2 * w2
   if tmp <= theta :
       return 0
   elif tmp > theta :
       return 1
       
2.3.2 가중치와 편향 도입
: theta를 -b로 치환하면 임계값 0을 기준으로 활성화, 비활성화를 결정하됨.

import numpy as np
x = np.array([0, 1])
y = np.array([0.5, 0.5])
b = -0.7
w * x
np.sum(w*x)
np.sum(w*x) + b

2.3.3 가중치와 편향 구현하기 => 편향을 도입하면 임계치는 0이 된다.
* 가중치를 고려한 AND 게이트는 다음과 같이 구현할 수 있습니다.

def AND(x1, x2):
    x = np.array([x1, x2])
    w = np.array([0.5, 0.5])
    b = -0.7
    tmp = np.sum(w*x) + b
    if tmp <= 0 :
        return 0
    else:
        return 1
        
* 여기에서는 (-theta)가 편향 b로 치환되었습니다.
* 이처럼 편향의 값은 뉴런이 얼마나 쉽게 활성화되는지를 결정합니다.
* 한편, w1, w2는 '가중치'로, b는 '편향'으로 서로 구별하기도 합니다만, 이 책에서는 문맥에 따라 셋 모두를 '가중치'라고 할 때도 있습니다.

[이어서 NAND 게이트와 OR 게이트를 구현해봅시다.]
def NAND(x1, x2):
    x = np.array([x1, x2])
    y = np.array([-0.5, -0.5])
    b = 0.7
    tmp = np.sum(w*x) + b
    if tmp <= 0:
        return 0
    else:
        return 1
        
def OR(x1, x2):
    x = np.array([x1, x2])
    w = np.array([0.5, 0.5])
    b = -0.2
    tmp = np.sum(w*x) + b
    if tmp <= 0:
       return 0
    else:
       return 1
       
       
2.4.1 도전! XOR 게이트
* XOR 게이트는 [배타적 논리합]이라는 논리 회로입니다.


2.5 다층 퍼셉트론이 출동한다면
* 안타깝게도 퍼셉트론으로는 XOR 게이트를 표현할 수 없었습니다. 그렇다고 슬퍼할 필요는 없었습니다.
* 사실 퍼셉트론의 아름다움은 '층을 쌓아' [다층 퍼셉트론]을 만들 수 있다는데 있스비다.

2.5.1 기존 게이트 조합하기

2.5.1 XOR 게이트 구현하기

def XOR(x1, x2):
    s1 = NAND(x1, x2)
    s2 = OR(x1, x2)
    y = AND(s1, s2)
    return y
